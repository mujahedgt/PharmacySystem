<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEBLAEsAAD/4QCaRXhpZgAATU0AKgAAAAgAAwEOAAIAAABQAAAAMgEaAAUAAAAB
        AAAAggEbAAUAAAABAAAAigAAAABEYXJrIEdyZWVuIERlZm9jdXNlZCBCbHVycmVkIE1vdGlvbiBBYnN0
        cmFjdCBCYWNrZ3JvdW5kLCBXaWRlc2NyZWVuLCBIb3Jpem9udGFsAAAAASwAAAABAAABLAAAAAH/2wBD
        AAoHBwgHBgoICAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8
        SDc9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7
        Ozs7Ozs7Ozs7Ozs7Ozv/wgARCAFYAmQDAREAAhEBAxEB/8QAGAABAQEBAQAAAAAAAAAAAAAAAAEDAgb/
        xAAYAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAB8/PKKLCEIqoSiKgqUFShKUJYqUJQ
        lKEoSwpJQAAARRFgWEWLCLFhFhFiiKWLJSlilgWKIoHWudCKIQiyhKIqUJSoKVBSoipQlCUoShKBJRSA
        AIogWEURYsIsWEWEUsIpYqWKWKWBYoLAveuZCKIQiyhKIqUJSoKVBSoipQlCUoShBUAoEACKIFhFEWLC
        LFhFhFLCKWSlililgUsCwL3rmQiiEIsoSiKlCUqClQUqIqUJQVCUFQCogAAAsCwLCLCLFEWEWEWKWKWS
        iKWKWKCwLAveuZAsIQiyhKItlElKgpUFCWKgqUFQEoSgFQIABYCKIoixYRYRYFiwililkpYpYFigsCxR
        1rnUUQhCKqEoKgslKgpUFCUsEoShKEoCUCAAABFEURYRSwiwiwilhFLFSxSlgWKCxRFHWuZLRCEIqoSg
        qCyUqChKUJRFQVBUFQUBKIAAECiBYRSwiwiiLFhFLFLBLFKWKIpYFEUda5kVUIRYCVKCoLJQVKEoKlgV
        BUFQChKAEQAUAQLCKIsIpYRYFiwLFLJSxRFLFBYFgUda5hZUIQLCVKCoKlgVBUoKgsEoSgqAUIALAAgC
        wEURYFhFgWLAsWKWCWKUsCxQWBYoHWuYWEqEUQlSgqCpYFQUJShKIqAlBUAoRAAAKICKIFiwLCLAsWBY
        qWKWBSxRFKIsCiHeuYIsqEUSoSgqCoilQUJQVEUJQVAKgACAAAIoEUQilhFEWBYpZLApYoilLAsCwKId
        65hYSoRRKgqChLBKCoKgpYIKgoKgBBRAAEAUQLAsCwLCLAsUsgsUsUFiiKCwLAoi965kWAlQiyoCUoSi
        SgqChKIqChBQEoAAgAAQKIFgWBYQLFiiKligsUoiiKUQLAsC965kWAhLYSoCUFQWSgqChKIJQUIKAgoA
        EQABYAsCwLCBYoilioiligsCxQWBYFEUd65kWAhLYQlCUFQVEUqAUJYFQChBQAgAASwALAogWECxRFLA
        slKIpRFEUFgWBRFHeuZFEIS2EFQlBUFElBUFCUQKgFCACgAgEAsAWAiiBYoilgVLFEUoigsCwLAFgUd6
        5kUQhLYQVCUFQUSUFQCiSgFQAUIAAAlgAUQLARRFEUoipYoLAsUFgUQLAoiiGmuYWEIS2EFQEpQgqWAS
        goElAKgAAACAAWABYCKIoilElLApYFLAogWBYAsCiGmsEWEIRZUBKEoKgqIoKgFCIoACUAACUCABYCBR
        FEUokpYFLAoigsCiBYFEUQHesVFhCEWVAShKCoKJKAVAKAiKAAAABAEUARRFBYFRFLApYFEUFgUQKIoE
        UQHesVFhCLCCoQUJQlBZBQCoBQEQBQAAFgEARQWALAsEpYFLAoigsCiALFAgWAL3rmS2EBFhKhBQlBUA
        sgoBUAFEAAAAACKgFECiKCyCwKURRFBRFAgURQIogIumuZLRCEWEJQgoShKCwQUAFQBFAAAIFAQWAKIF
        EUJYFKIoLAoigQKIoECiAi6a5hZUIRYQVCChKCoBRIKAAUCAAAACwQCgRQWBURQURQWBRAogUCKBAsAW
        GmsEWEqEWAhKEFCUFQCiAQUACAACgAFQIFBYAqIoKIoLAogUCKBFAgUQEUaawRYQlFhCEFQCoKAlAigA
        AogAAAoEgoBYAoLBKBFBYFECgRQBFAgWALAaawRRCEJbAQlCAVBQCgSACgCAUAAoCCiAKCwKgRQCwKIF
        AigCKBAogIoGmsBYQhAsqEBKEAoSgARQAAIoCgAFCIFALAFEgoKIFECgRQAWAECwAigaayQiwEIRVQgJ
        QgFCAUQABVCAACgAqACwBRAqAWAKIFAigARQIFEAWAhrrJAsIQgWEoQEoQCgAFgAAWUAAFARFAKBAoCW
        AKIFAgUACKBAFgBFAhrrIIsICEIolCAgoQCgCAWgCCgAFAQUARQAWCAUQKBFAALAAQKIAsBAa6yCLAQg
        IRRKEBBQABFACgWAUAAqIAFABYAJYAFECgARQAIFEAIoEBpqVARYQEBCKJQEAoAECgASgAFACCgAsACg
        SAUCBQBAoAgCiAEUCALprJKEUQgICAiqgAIKJQABYAKAAUIgCgAoEAlAgUAQBQBAFEACwEAUaayCUIsB
        AQEBBaBAgCgKEAAAoABUAAogCgSAUAQBQBAAogAWAEAWGuoQgJRYCAgBACUAAAFEFAABQBIBQACgQKEA
        QBQBAAFEACwAgCwGuoQEBBbAQAgBAKAAABABQAAChABQIAoCIAoAEAAUQABYAQBRAaalCAgIFlAQAgAB
        AWoEoAAAKAAiKAACgBEUACAAKBAAFgABAogBpqAVAQECwUIAAQABAABQAAChAAKAAIoCBAAAogAACwAA
        gUQALpqEAqAgIAsAFQAAIAAAAKABCwUQAAKAECABQIAAoAgAIAogAUaagIBUBACAEUAAgAVCgQAAABUA
        AFAAEAgoEAAUAQAAEAUQAKBpqAEAJQgAIACAAAAAAFAACACgCAAKAIBAAKBAAAQBQIAFAGmhACAEFCAA
        gAAAAAAAAioAAAAKAIAAAFQIAAFEAoIEAAUAf//EABQQAQAAAAAAAAAAAAAAAAAAALD/2gAIAQEAAQUC
        Tv8A/8QAFBEBAAAAAAAAAAAAAAAAAAAAsP/aAAgBAwEBPwFO/wD/xAAUEQEAAAAAAAAAAAAAAAAAAACw
        /9oACAECAQE/AU7/AP/EABQQAQAAAAAAAAAAAAAAAAAAALD/2gAIAQEABj8CTv8A/8QAFBABAAAAAAAA
        AAAAAAAAAAAAsP/aAAgBAQABPyFO/wD/2gAMAwEAAgADAAAAEP0A3BRnu5RaLmuLBRUO0su3mumk1vvs
        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
        v8FeL43yv418r5UpS+FLxdpfh//Z
</value>
  </data>
</root>